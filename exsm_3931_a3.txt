#########################################################################
# Pseudo code for Hungry Customer
# assumption - the hungry customer already knows which snack they want
# Assumption - snacks are selected by a 4 character alpha code
# 1. select the snack by entering a code
# 2. Receive payment
# 3. Return change
#########################################################################
price = 0
payment = 0

FUNCTION checkSnackCode(snackCode){
    if the snackCode exists in the database return True
    else return False
}

FUNCTION price(snackCode) {
    # lookup the snackcode in a database of some sort
    price = snackCode.price
    return price
}

FUNCTION receivePayment(price){
change = 0
paymentComplete = False
    while payment <= price {
        payment = payment + coin.value
        if cancel button is pressed {
            change = payment
            reset payment to 0
            return (paymentComplete, change) # paymentComplete will be False
            exit loop
        }
    }
    paymentComplete = True
    if payment > price {
        change = payment - price
    }
    return (paymentComplete, change)
}

FUNCTION vendSnack(snackCode){
    activate mechanism to vend the correct snack based on the snackCode
    if snackSuccessFullyVended {
        return True
    else {
        return False
    }
}

FUNCTION shutDownMachine {
    Something went wrong so turn off machine
}

FUNCTION getSnackCode() {
    counter = 0
    snackCode = '' # empty string
    validSnackCode = False
    While validSnackcode is False
        # the while statement above places the machine into a waiting state
        for counter 0 to 3 {
        # Handle a cancel
            if cancel button is pressed {
                reset count to 0 # Waiting state on machine
                snackCode = ''
                exit loop
            }
            # enter digit on keyboard and add the digit to the snackCode string
            snackCode = snackCode + keyPressed
            increment counter by 1 # language dependent
        }

        validSnackCode = checkSnackCode(snackCode)
        if validSnackCode {
            price = price(snackCode)
            if receivePayment.paymentComplete {
                snackVended = vendSnack(snackCode)
                if !snackVended{
                    returnChange = price + receivePayment.change
                    shutdownMachine()
                }
            }
            returnChange = receivePayment.change
        }

        validSnackCode = False
    }
}

# Start Here !!!
# when getSnackCode runs the machine will remain in a state where
# it waits for a keypad selection to be made
getSnackCode()


#########################################################################
# Pseudo code for Machine Owner
# assumption - All of these processes are manual and there is no need
# for coding
#########################################################################

FUNCTION unlockMachine(type) {
#     manual process by owner
    Place key in keyslot and turn
    if type = 'unlock' {
        If the machine opens {
                return true
        } otherwise {
                return false
         }
    }
    if type = 'lock'   {
        If the machine locks {
            return true
        } otherwise {
            return false
        }
   }
}

FUNCTION replenishStock{
# TODO: would need to anticpate running out of stock which would return false
# but many shelves would contain different stock
    for each shelf in the machine {
        if the current shelf is not full {
            while the shelf is not full {
                add one item to the shelf
            }
        }
    }
    return
}

FUNCTION emptyCashBox{
#     manual process by owner to empty the cashbox
    open cashbox
    place coins in coin bag
    replace cashbox
    return
}

# Main Flow
stockMachine {
    # Unlock Machine, restock, empty cash box
    if lockMachine(unlock) = True {
        replenishStock()
        emptyCashBox()
    } otherwise { # Unable to open machine
        call a locksmith
    {
    # lock machine. If unable to lock, call a locksmith
    if lockmachine(lock) = False {
        call a locksmith
    }
}